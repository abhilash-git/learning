# -*- coding: utf-8 -*-
"""amortization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rxhdZqvXZ87tK2CUHyWIa8Nq1FHCZE9z
"""

from datetime import datetime,date,timedelta
import calendar
def getMonthwithIndex(index=0,date_in=datetime.now(),backward=False):
    days_in_month=0
    date_in = date_in.replace(day=1)
    for i in range(index):
      days_in_month = calendar.monthrange(date_in.year, date_in.month)[1]
      if backward:
        date_in=date_in - timedelta(days=days_in_month)
      else:
        date_in = date_in + timedelta(days=days_in_month)
    return date_in

!pip install numpy-financial
import numpy_financial as npf
import pandas as pd
import matplotlib.pyplot as plt
pd.options.display.float_format = '{:.5f}'.format
pd.set_option('display.float_format', lambda x: '%.5f' % x)

class Loan:
  def __init__(self, principle_amount, interest_in_year, period_in_years,starting_date=datetime.now()):
    self.starting_date = starting_date
    self.principle_amount = principle_amount
    self.interest_in_year = interest_in_year
    self.period_in_years = period_in_years
    self.column_names = ["MONTH", "STARTING_AMOUNT", "EMI_AMOUNT", "INTEREST_PAID", "PRINCIPLE_PAID", "LEFTOVER_PRINCIPLE"]
    self.df = pd.DataFrame(columns = self.column_names)
    self.orginal_df = pd.DataFrame(columns = self.column_names)
    self.emi_amount = npf.pmt((interest_in_year/100)/12, period_in_years*12, -principle_amount,0)
    self.Principle_paid=0
    self.Interest_paid=0
    self.advancePayments=[]

  def getPrincipleAmount(self):
      return self.principle_amount

  def setPrincipleAmount(self,amt):
    self.principle_amount = amt;

  def getDataFrame(self):
    return self.df

  def populateDateFrame(self):
    temp_emi = self.emi_amount
    period_in_months = int(round(self.period_in_years*12))
    print("called {}".format(period_in_months))
    for i in range(0,period_in_months):
      temp_list_one_row=[]
      # print(i)
      if self.getPrincipleAmount() < 1:
        print("Break")
        break;
      temp_list_one_row.append(getMonthwithIndex(i+1,self.starting_date).date())
      temp_list_one_row.append(self.getPrincipleAmount())
      self.Interest_paid=(self.getPrincipleAmount()*(self.interest_in_year/100)/12)
      if self.getPrincipleAmount() < self.emi_amount:
        print("EMI changed P={} I={}".format(self.getPrincipleAmount() , self.Interest_paid))
        self.emi_amount=self.getPrincipleAmount() + self.Interest_paid
      temp_list_one_row.append(self.emi_amount)
      temp_list_one_row.append(self.Interest_paid)
      self.Principle_paid = self.emi_amount - self.Interest_paid
      temp_list_one_row.append(self.Principle_paid)
      temp_list_one_row.append(self.getPrincipleAmount() - self.Principle_paid)
      self.setPrincipleAmount(self.getPrincipleAmount() - self.Principle_paid)

      # print(temp_list_one_row)
      self.df = self.df.append(pd.Series(temp_list_one_row, index=self.column_names), ignore_index=True)

    self.emi_amount = temp_emi 
    if self.orginal_df.empty:
      self.orginal_df = self.df.copy(deep=True)



  def adjustWithAdvancePayment(self, payment_date, paid_amount):
    temp_list1=[]
    self.period_in_years = round((self.df[self.df.MONTH > payment_date.date()].shape[0] -1 )/12, 5)
    print("Printing year {}".format(self.period_in_years))
    self.setPrincipleAmount(self.df[self.df.MONTH==payment_date.date()].LEFTOVER_PRINCIPLE.item())
    self.df.drop(self.df[self.df.MONTH> payment_date.date()].index, inplace=True)
    self.starting_date=getMonthwithIndex(1, payment_date)
    temp_list1.append(self.starting_date.date())
    temp_list1.append(self.getPrincipleAmount())
    temp_list1.append(self.emi_amount)
    self.Interest_paid=(self.getPrincipleAmount()*(self.interest_in_year/100)/12)
    temp_list1.append(self.Interest_paid)
    advance_paid = paid_amount - self.Interest_paid;
    self.advancePayments.append(advance_paid);
    print("Printing advance_paid {}".format(advance_paid))
    self.Principle_paid = (self.emi_amount - self.Interest_paid) + advance_paid;
    temp_list1.append(self.Principle_paid)
    temp_list1.append(self.getPrincipleAmount() - self.Principle_paid)
    self.setPrincipleAmount(self.getPrincipleAmount() - self.Principle_paid)
    # print(temp_list1)
    self.df = self.df.append(pd.Series(temp_list1, index=self.column_names), ignore_index=True)
    self.populateDateFrame()


  def getTrend(self,deviation=False):
    if not self.df.empty and not self.orginal_df.empty and deviation:
      deviation=True;
    fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15, 5))
    axes[0].plot(self.df.MONTH,self.df.STARTING_AMOUNT,color="blue")
    axes[1].plot(self.df.MONTH,self.df.PRINCIPLE_PAID,color="red")
    if deviation:
      axes[0].plot(self.orginal_df.MONTH,self.orginal_df.STARTING_AMOUNT,color="green")
      axes[1].plot(self.orginal_df.MONTH,self.orginal_df.PRINCIPLE_PAID,color="green")

    fig.tight_layout()

    plt.show()
    if deviation:
      print("You would have paid {} and with advance payment you paid {} ".format(self.orginal_df.EMI_AMOUNT.sum() , self.df.EMI_AMOUNT.sum()))
      print("Your saving is {} out of which advance principle paid is {}".format(self.orginal_df.EMI_AMOUNT.sum() - self.df.EMI_AMOUNT.sum(), 
                                                                       sum(self.advancePayments)))
      print("You saved {} in interest".format(self.orginal_df.EMI_AMOUNT.sum() - self.df.EMI_AMOUNT.sum() - sum(self.advancePayments)))

print("provide the date of Disbursement")
# year = int(input('Enter a year :'))
year=2020
# month = int(input('Enter a month :'))
month=5
# day = int(input('Enter a day :'))
day=5
date1 = datetime(year, month, day, 00, 00, 00, 00)
# print(date1)

print("Provide details of Loan")
# amount = int(input('Enter principle amount :'))
amount=10000000
# rate = float(input('Enter the rate of interest accepted :'))
rate=12
# duration = int(input('Enter the duration in years :'))
duration=30

obj1=Loan(amount,rate,duration,date1)

obj1.populateDateFrame()

obj1.getDataFrame()

obj1.adjustWithAdvancePayment(payment_date=datetime(2049, 1, 1, 00, 00, 00, 00),paid_amount=400000)

obj1.adjustWithAdvancePayment(payment_date=datetime(2049, 4, 1, 00, 00, 00, 00),paid_amount=400000)

pd.set_option("display.max_rows", None, "display.max_columns", None)
obj1.getDataFrame()

# a.getDataFrame()[a.getDataFrame()[MONTH==datetime(2049, 1, 1, 00, 00, 00, 00).date()]]
obj1.getDataFrame()[obj1.getDataFrame().MONTH> datetime(2021, 12, 1, 00, 00, 00, 00).date()]

obj1.getTrend(deviation=True)

